{"version":3,"file":"index.cjs.js","sources":["../src/components/OMGShared.js","../src/components/OMGBase.js","../src/components/BPMNViewer.js","../src/components/BPMNEditor.js","../src/components/BPMN.js","../src/components/CMMNViewer.js","../src/components/CMMNEditor.js","../src/components/CMMN.js","../src/components/Components.js"],"sourcesContent":["export const options = {\n  \"id\": \"BPMN\",\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"description\": \"BPMN options\",\n  \"x-layout\": \"component\",\n  \"type\": \"object\",\n  \"version\": 0.1,\n  \"properties\": {\n    \"backgroundColor\": {\n      \"title\": \"backgroundColor\",\n      \"description\": \"backgroundColor\",\n      \"type\": \"string\",\n      \"format\": \"color\",\n      \"default\": \"white\"\n    }\n  },\n  \"required\": [\"backgroundColor\"]\n}\n\n\nexport const COMPONENT_STANDARD_FAILURE = {\n  \"$id\": \"https://example.com/card.schema.json\",\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"description\": \"Standard error message\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"url\": {\n      \"type\": \"string\",\n      \"format\": \"uri\"\n    },\n    \"xml\": {\n      \"type\": \"string\",\n      \"format\": \"xml\"\n    }\n  }\n}\n\nexport const COMPONENT_SCHEMA_BPMN_BUISSINESSOBJECT = {\n  bpmnType: 'string',\n  bpmnId: 'string',\n  name: 'string',\n}\n\nexport const COMPONENT_SCHEMA_BPMN_DEFINITION = {\n  type: 'object'\n}\n\nexport const COMPONENT_SCHEMA_CMMN_DEFINITION = {\n  type: 'object'\n}\n\nexport const COMPONENT_SCHEMA_CMMN_FULL = {\n  '$id': 'https://example.com/card.schema.json',\n  '$schema': 'http://json-schema.org/draft-07/schema#',\n  title: 'Diagram full',\n  description: 'User saves CMMN',\n  type: 'object',\n  properties: {\n    xml: { type: 'string', format: 'xml' },\n    definition: COMPONENT_SCHEMA_CMMN_DEFINITION\n  }\n}\n\nexport const COMPONENT_SCHEMA_BPMN_FULL = {\n  '$id': 'https://example.com/card.schema.json',\n  '$schema': 'http://json-schema.org/draft-07/schema#',\n  title: 'Diagram full',\n  description: 'User saves BPMN',\n  type: 'object',\n  properties: {\n    xml: { type: 'string', format: 'xml' },\n    definition: COMPONENT_SCHEMA_BPMN_DEFINITION\n  }\n}\n\n\nexport const COMPONENT_SCHEMA_BPMN_SELECT_DETAIL = {\n  '$id': 'https://example.com/card.schema.json',\n  '$schema': 'http://json-schema.org/draft-07/schema#',\n  title: 'Diagram selection',\n  description: 'User selects element in a diagram',\n  type: 'object',\n  properties: {\n    element: COMPONENT_SCHEMA_BPMN_BUISSINESSOBJECT,\n    parent: COMPONENT_SCHEMA_BPMN_BUISSINESSOBJECT,\n    incoming: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: COMPONENT_SCHEMA_BPMN_BUISSINESSOBJECT\n      }\n    },\n    outgoing: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: COMPONENT_SCHEMA_BPMN_BUISSINESSOBJECT\n      }\n    },\n    definition: COMPONENT_SCHEMA_BPMN_DEFINITION\n  }\n}\n\nexport const COMPONENT_SCHEMA_BPMN_SELECT_BASIC = {\n  '$id': 'https://example.com/card.schema.json',\n  '$schema': 'http://json-schema.org/draft-07/schema#',\n  title: 'Diagram selection',\n  description: 'User selects element in a diagram',\n  type: 'object',\n  properties: {\n    element: COMPONENT_SCHEMA_BPMN_BUISSINESSOBJECT\n  }\n}\n\nexport const COMPONENT_SCHEMA_BPMN_LOADING = {\n  '$id': 'https://example.com/card.schema.json',\n  '$schema': 'http://json-schema.org/draft-07/schema#',\n  title: 'Diagram loading',\n  description: 'XML diagram is loading',\n  type: 'object',\n  properties: {\n    xml: {\n      type: 'string',\n      format: 'xml'\n    }\n  }\n}\n\nexport const COMPONENT_SCHEMA_BPMN_LOADED = {\n  '$id': 'https://example.com/card.schema.json',\n  '$schema': 'http://json-schema.org/draft-07/schema#',\n  title: 'Diagram loading',\n  description: 'XML diagram is loading',\n  type: 'object',\n  properties: {\n    xml: {\n      type: 'string',\n      format: 'xml'\n    },\n    definition: COMPONENT_SCHEMA_BPMN_DEFINITION\n  }\n}\n\nexport function elementExtractInfo(self_state, buisinessEvent) {\n\n  const definitionRef = buisinessEvent.definitionRef || { name: '', '$type': '' };\n\n  let event_info = {\n    id: self_state.id,\n    selection: {\n      bpmnId: buisinessEvent.id,\n      bpmnType: buisinessEvent['$type'],\n      label: definitionRef.name,\n      define: {\n        type: definitionRef['$type'],\n        autoComplete: definitionRef.autoComplete,\n        isBlocking: definitionRef.isBlocking\n      }\n    },\n    selected: []\n  }\n\n  return event_info;\n}\n\n/*\nexport const eventHandlerSubmitCMMN = (obj) => {\n  console.info(\"TODO: send data\");\n  const event = {\n    definition: this.cmmnViewer.getDefinitions()\n  };\n  elementSelectCMMN('submitted', this, event, false, this);\n}\n*/\n\n\n/*\nexport const commonEventsOMG = {\n  failure: {\n    alias: [],\n    info: {\n      name: 'Failure',\n      description: 'Returns issues this component detects when executing actions'\n    },\n    schema: COMPONENT_STANDARD_FAILURE,\n    handler: (obj) => {\n      debugger;\n    }\n  },\n  \n  loading: {\n    alias: [],\n    info: {\n      name: 'Loading',\n      description: 'Loaded BPMN XML string'\n    },\n    schema: COMPONENT_SCHEMA_BPMN_LOADING\n  },\n  loaded: {\n    alias: ['open', 'fetch', 'streamed'],\n    info: {\n      name: 'Loaded',\n      description: 'XML diagram has been loaded'\n    },\n    schema: COMPONENT_SCHEMA_BPMN_LOADED\n  }, \n  selected: {\n    alias: ['click', 'choose'],\n    info: {\n      name: 'Select',\n      description: 'Diagram element selected'\n    },\n    schema: COMPONENT_SCHEMA_BPMN_SELECT_DETAIL\n  },\n  \n  tap: {\n    alias: ['dblclick'],\n    info: {\n      name: 'Tap',\n      description: 'Diagram element tapped'\n    },\n    schema: COMPONENT_SCHEMA_BPMN_SELECT_DETAIL\n  },\n  press: {\n    alias: ['mouse-pressed'],\n    info: {\n      name: 'Press',\n      description: 'Diagram element pressed'\n    },\n    schema: COMPONENT_SCHEMA_BPMN_SELECT_BASIC\n  },\n  release: {\n    alias: ['mouse-release'],\n    info: {\n      name: 'Release',\n      description: 'Diagram element released after being pressed'\n    },\n    schema: COMPONENT_SCHEMA_BPMN_SELECT_BASIC\n  },\n  'hover-over': {\n    alias: ['hover'],\n    info: {\n      name: 'Hover Over',\n      description: 'Mouse hovering over element'\n    },\n    schema: COMPONENT_SCHEMA_BPMN_SELECT_BASIC\n  },\n  'hover-exit': {\n    alias: ['out'],\n    info: {\n      name: 'Hover Exit',\n      description: 'Mouse moved from hovering over element'\n    },\n    schema: COMPONENT_SCHEMA_BPMN_SELECT_BASIC\n  },\n  submitted: {\n    alias: ['save', 'export'],\n    info: {\n      name: 'Submitted',\n      description: 'User submitting diagram'\n    },\n    schema: COMPONENT_SCHEMA_BPMN_FULL\n  },\n  edited: {}\n  \n  ,editing: {},\n  'enabling': {},\n  'enabled': {},\n  'disabling': {},\n  'disabled': {}\n  \n}\n*/\n\n/*\nexport function getCommonTriggers(self, omgInst) {\n  return {\n    enable: {\n      alias: [],\n      info: {\n        name: 'Enable',\n        description: 'Allows user to interact with the diagram when selecting the diagram elemements'\n      },\n      schema: {},\n      handler: (obj) => {\n        console.info(\"TODO: enable \", obj);\n      }\n    },\n    disable: {\n      alias: [],\n      info: {\n        name: 'Disable',\n        description: 'Allows user to interact with the diagram when selecting the diagram elemements'\n      },\n      schema: {},\n      handler: (obj) => {\n        console.info(\"TODO: Disable button\");\n      }\n    },\n\n    load: {\n      alias: [],\n      info: {\n        name: 'Load',\n        description: 'Allows user to interact with the diagram when selecting the diagram elemements'\n      },\n      schema: {},\n      handler: (obj) => {\n        self.setState({\n          diagramXML: obj.xml,\n          url: obj.url,\n          id: obj.id\n        });\n\n        if (obj.xml) {\n          self.loadDiagram(obj.xml);\n        } else if (obj.url) {\n          self.fetchDiagram(obj.url);\n        }\n      }\n    },\n    submit: {\n      alias: [],\n      info: {\n        name: 'Submit',\n        description: 'Submits diagram'\n      },\n      schema: {},\n      handler: (obj) => {\n        omgInst.saveXML({ format: true }, function (err, xml) {\n\n          const event_data = {\n            id: self.state.id,\n            definition: omgInst.getDefinitions(),\n            xml: xml,\n            error: err\n          };\n\n          // Share event - loaded\n          EventManager.getInstance().addEvent(self.config.id, self.eventDD['submitted'].id, event_data, {});\n\n        });\n      }\n    },\n    select: {\n      alias: [],\n      info: {\n        name: 'SELECT',\n        description: 'Allows user to interact with the diagram when selecting the diagram elemements'\n      },\n      schema: {},\n      handler: (obj) => {\n        if (obj.bpmnId) {\n          let selectionInst = omgInst.get(\"selection\");\n          try {\n            selectionInst.select(obj.bpmnId);\n          } catch (e) {\n            // TODO: throw common error notifying that the selection could not be done (missing content)\n          }\n        }\n      }\n    },\n    clear: {\n      alias: [],\n      info: {\n        name: 'Enable',\n        description: 'Allows user to interact with the diagram when selecting the diagram elemements'\n      },\n      schema: {},\n      handler: (obj) => {\n        try {\n          omgInst.clear();\n          obj.id = this.state.id;\n          EventManager.getInstance().addEvent(self.config.id, self.eventDD['cleared'].id, obj, {});\n        } catch (e) {\n          // TODO: throw common error\n        }\n      }\n    }\n  }\n}\n*/\nexport const triggers = () => {\n  return {\n    enable: {\n      alias: [],\n      info: {\n        name: 'Enable',\n        description: 'Enable'\n      },\n      schema: {}\n    },\n    disable: {\n      alias: [],\n      info: {\n        name: 'Disable',\n        description: 'Disable'\n      },\n      schema: {}\n    },\n    load: {\n      alias: [],\n      info: {\n        name: 'Load',\n        description: 'Load data'\n      },\n      schema: {}\n    },\n    submit: {\n      alias: ['save', 'export'],\n      info: {\n        name: 'Submit',\n        description: 'Submit diagram'\n      },\n      schema: {}\n    },\n    select: {\n      alias: [],\n      info: {\n        name: 'Select item',\n        description: 'Selects the data item'\n      },\n      schema: {}\n    },\n    clear: {\n      alias: [],\n      info: {\n        name: 'Clear items',\n        description: 'Removes all items from list'\n      },\n      schema: {}\n    }\n  }\n}\n\nexport const events = () => {\n  return {\n    enabled: {\n      alias: ['enabled'],\n      info: {\n        name: 'enabled',\n        description: 'Diagram enabled by user'\n      },\n      schema: COMPONENT_SCHEMA_BPMN_LOADING\n    },\n    disabled: {\n      alias: [],\n      info: {\n        name: 'disabled',\n        description: 'Disabled diagram'\n      },\n      schema: COMPONENT_SCHEMA_BPMN_LOADING\n    },\n    changed: {\n      alias: ['changed'],\n      info: {\n        name: 'changed',\n        description: 'Diagram changed by user'\n      },\n      schema: COMPONENT_SCHEMA_BPMN_LOADING\n    },\n    loading: {\n      alias: ['opening', 'fetching', 'streaming'],\n      info: {\n        name: 'loading',\n        description: 'Loading diagram'\n      },\n      schema: COMPONENT_SCHEMA_BPMN_LOADING\n    },\n    loaded: {\n      alias: ['opened', 'fetched', 'streamed'],\n      info: {\n        name: 'loaded',\n        description: 'Loaded diagram'\n      },\n      schema: COMPONENT_SCHEMA_BPMN_LOADED\n    },\n    selected: {\n      alias: [],\n      info: {\n        name: 'Selected',\n        description: 'Selecting item'\n      },\n      schema: COMPONENT_SCHEMA_BPMN_SELECT_DETAIL\n    },\n    tap: {\n      alias: ['dblclick'],\n      info: {\n        name: 'Tap',\n        description: 'Diagram element tapped'\n      },\n      schema: COMPONENT_SCHEMA_BPMN_SELECT_DETAIL\n    },\n    'hover-over': {\n      alias: [],\n      info: {\n        name: 'Hover over',\n        description: 'Hover over element'\n      },\n      schema: COMPONENT_SCHEMA_BPMN_SELECT_DETAIL\n    },\n    'hover-exit': {\n      alias: [],\n      info: {\n        name: 'Hover exit',\n        description: 'Hover exists element'\n      },\n      schema: COMPONENT_SCHEMA_BPMN_SELECT_DETAIL\n    },\n    press: {\n      alias: ['mouse-down'],\n      info: {\n        name: 'Press',\n        description: 'Pressed element'\n      },\n      schema: COMPONENT_SCHEMA_BPMN_SELECT_DETAIL\n    },\n    release: {\n      alias: ['mouse-release'],\n      info: {\n        name: 'Release',\n        description: 'Diagram element released'\n      },\n      schema: COMPONENT_SCHEMA_BPMN_SELECT_DETAIL\n    },\n    cleared: {\n      alias: ['removed', 'reset'],\n      info: {\n        name: 'cleared',\n        description: 'Diagram area cleared'\n      },\n      schema: COMPONENT_SCHEMA_BPMN_SELECT_DETAIL\n    },\n    submitted: {\n      alias: ['exported', 'saved'],\n      info: {\n        name: 'submitted',\n        description: 'Saved diagram'\n      },\n      schema: {}\n    },\n    failure: {\n      alias: ['error', 'exception'],\n      info: {\n        name: 'failure',\n        description: 'Error occured'\n      },\n      schema: {}\n    }\n  }\n}\n","// common tools\nimport { structs } from 'modelui-core-runtime';\n// import { StateBaseComponent } from './StateBaseComponent';\n// event handler\n// import EventManager from './Event';\n\nexport const events = {\n  enabled: {\n    alias: [],\n    info: {\n      name: 'Enabled',\n      description: 'Enabled input'\n    },\n    schema: {}\n  },\n  disabled: {\n    alias: [],\n    info: {\n      name: 'Disabled',\n      description: 'Disabled input'\n    },\n    schema: {}\n  },\n  populating: {\n    alias: [],\n    info: {\n      name: 'Populating',\n      description: 'Populating value'\n    },\n    schema: {}\n  },\n  populated: {\n    alias: [],\n    info: {\n      name: 'Populated',\n      description: 'Populated value'\n    },\n    schema: {}\n  },\n  invalidated: { alias: [], info: { name: 'In-validated', description: 'Unselecting item' }, schema: {} },\n  validated: { alias: [], info: { name: 'De-Selected', description: 'Unselecting item' }, schema: {} },\n\n  /// here we have specific OMG\n  changed: {\n    alias: ['changed'],\n    info: {\n      name: 'changed',\n      description: 'Diagram changed by user'\n    },\n    schema: {}\n  },\n  /*\n  loading: {\n    alias: ['opening', 'fetching', 'streaming'],\n    info: {\n      name: 'loading',\n      description: 'Loading diagram'\n    },\n    schema: {}\n  },\n  loaded: {\n    alias: ['opened', 'fetched', 'streamed'],\n    info: {\n      name: 'loaded',\n      description: 'Loaded diagram'\n    },\n    schema: {}\n  },\n  */\n  selected: {\n    alias: [],\n    info: {\n      name: 'Selected',\n      description: 'Selecting item'\n    },\n    schema: {}\n  },\n  tap: {\n    alias: ['dblclick'],\n    info: {\n      name: 'Tap',\n      description: 'Diagram element tapped'\n    },\n    schema: {}\n  },\n  'hover-over': {\n    alias: [],\n    info: {\n      name: 'Hover over',\n      description: 'Hover over element'\n    },\n    schema: {}\n  },\n  'hover-exit': {\n    alias: [],\n    info: {\n      name: 'Hover exit',\n      description: 'Hover exists element'\n    },\n    schema: {}\n  },\n  press: {\n    alias: ['mouse-down'],\n    info: {\n      name: 'Press',\n      description: 'Pressed element'\n    },\n    schema: {}\n  },\n  release: {\n    alias: ['mouse-release'],\n    info: {\n      name: 'Release',\n      description: 'Diagram element released'\n    },\n    schema: {}\n  },\n  cleared: {\n    alias: ['removed', 'reset'],\n    info: {\n      name: 'cleared',\n      description: 'Diagram area cleared'\n    },\n    schema: {}\n  },\n  submitted: {\n    alias: ['exported', 'saved'],\n    info: {\n      name: 'submitted',\n      description: 'Saved diagram'\n    },\n    schema: {}\n  },\n  failure: {\n    alias: ['error', 'exception'],\n    info: {\n      name: 'failure',\n      description: 'Error occured'\n    },\n    schema: {}\n  }\n}\n\nexport const triggers = {\n  submit: { info: { name: 'Submit', description: 'Submits the form data' }, schema: {}, alias: [] },\n  enable: { info: { name: 'Enables', description: 'Enables the form so that we can change form inputs' }, schema: {}, alias: [] },\n  disable: { info: { name: 'Disable', description: 'Disables the form so that we can not change input value' }, schema: {}, alias: [] },\n  // change: { info: { name: 'Change', description: 'Changes' }, schema: {}, alias: [] },\n  select: { info: { name: 'Select', description: 'Selects item by id' }, schema: {}, alias: [] },\n  clear: { info: { name: 'Clear', description: 'Removes all input values clearing the form' }, schema: {}, alias: [] },\n  populate: { info: { name: 'Populate', description: 'Fillls the form with specified data' }, schema: {}, alias: [] },\n};\n\n\nexport const options = {\n  \"id\": \"omg\",\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"OMG\",\n  \"description\": \"OMG options\",\n  \"x-layout\": \"component\",\n  \"type\": \"object\",\n  \"version\": 0.1,\n  \"properties\": {\n    \"disabled\": {\n      \"title\": \"disabled\",\n      \"description\": \"Is the view disabled\",\n      \"type\": \"boolean\",\n      \"default\": false\n    }\n  },\n  \"required\": [\"disabled\"]\n}\n\n\n// export class StateOMG extends structs.StateBaseComponent.StateBaseComponent {\nexport class StateOMG extends structs.StateBase.StateInstance {\n\n  constructor(props) {\n    super(props)\n    this.props = props\n    // ensure array\n    let _data = []\n    if (props.data) {\n      if (Array.isArray(props.data)) {\n        _data = props.data\n      } else {\n        // check if this is an empty object\n        if (typeof props.data === 'object') {\n          // objects should not be empty\n          if (props.data.length) {\n            _data = [props.data]\n          }\n        } else {\n          _data = [props.data]\n        }\n      }\n    }\n    // apply default values\n    this.state = { data: _data || [], selectedIndex: 0, selectedId: null }\n\n    if (!this.props.manager) {\n      throw new Error('Manager was not passed through StateList props')\n    }\n\n    this.eventManager = this.props.manager.getEventManager()\n  }\n\n  triggerEvent = (action, obj, evt) => {\n    this.eventManager.addEvent(this.props.id, action, obj, evt);\n  }\n\n  registerComponent = (actionHandlers, eventHandlers, component_info) => {\n    const self = this;\n    actionHandlers = actionHandlers || {};\n    eventHandlers = eventHandlers || {};\n\n    // add our known handlers\n    // register componenet overiding or adding new event handlers\n    const dataActionHandlers = {\n      submit: {\n        schema: {},\n        handler: (obj) => {\n          self.triggerEvent('submitting', obj, null);\n          self.getActionState('submit', function (change) {\n            const update = self.alterState(change);\n            self.triggerEvent('submitted', update.data, null);\n          });\n        }\n      },\n      enable: {\n        schema: {},\n        handler: (obj) => {\n          const change = { disabled: false }\n          self.triggerEvent('enabled', change, null);\n          self.alterState(change);\n          if (self.updateView(\"enable\", obj, obj, self.state.data)) {\n            self.triggerEvent('enabled', change, null);\n          }\n        }\n      },\n      disable: {\n        schema: {},\n        handler: (obj) => {\n          const change = { disabled: true }\n          self.alterState(change);\n          if (self.updateView(\"disable\", obj, obj, this.state.data)) {\n            self.triggerEvent('disabled', change, null);\n          }\n        }\n      },\n      select: {\n        schema: {},\n        handler: (obj) => {\n          const selected = obj.ids; // TODO: handle this generically \n          const change = { selected: selected }\n          const update = self.alterState(change);\n          self.triggerEvent('selecting', change, {});\n          if (self.updateView(\"select\", obj, change, update)) {\n            self.triggerEvent('selected', update.selected, null);\n          }\n          self.triggerEvent('changed', update.selected, null);\n        }\n      },\n      clear: {\n        schema: {},\n        handler: (obj) => {\n          const change = { selected: [], data: { xml: \"\" } }\n          const update = self.alterState(change);\n          self.triggerEvent('clearing', update, {});\n          if (self.updateView(\"clear\", obj, change, update)) {\n            self.triggerEvent('cleared', update.data, null);\n          }\n          self.triggerEvent('changed', update.data, null);\n        }\n      },\n      populate: {\n        schema: {},\n        handler: (obj) => {\n          const change = { data: obj }\n          self.triggerEvent('populating', change.data, null);\n          const update = self.alterState(change);\n          if (self.updateView(\"populate\", obj, update, update.data)) {\n            self.triggerEvent('populated', update.data, null);\n          }\n          self.triggerEvent('changed', update.data, null);\n        }\n      }\n    }\n\n    // register componenet overiding or adding new event handlers\n    this.ddEvent = this.eventManager.register(this.props.id, { ...dataActionHandlers, ...actionHandlers }, { ...events, ...eventHandlers }, component_info);\n    return this.ddEvent;\n  }\n}\n\nexport class OMGBase extends structs.StateBaseComponent.StateBaseComponent {\n  /**\n   * Used to manage internal state of avatars\n   */\n  constructor(props) {\n    if (!props.config.options) { props.config.options = {} }\n    super(props);\n    this.props = props;\n  }\n\n  updateView = (action, arr, updated, data) => {\n    // extend by parent\n    return true;\n  }\n\n  exceptionCatched = (action_name, event_object) => {\n    debugger;\n    console.info(\"OMG: \" + action_name + \" --> \", event_object)\n  }\n  /*  \n    getData = () => {\n      return this.state.data;\n    }\n  \n    showSelected = (id, idx) => {\n      // parent implementation to update the visual representation\n      return true; // returns true to update state. Else do not update state.\n    }\n  \n    setSelectedId = (id, evt, selected) => {\n      EventManager.getInstance().addAction(this.props.id, 'select', { id: id });\n    }\n  \n    handleSelect = (key, data, index, evt) => {\n  \n      if (!evt) { this.setSelectedId(data.id, evt); }\n  \n    }\n    */\n\n  render() { return null; }\n}","import React from 'react';\n\n// import BpmnJS from 'bpmn-js/dist/bpmn-navigated-viewer.production.min.js'; // https://bpmn.io/toolkit/bpmn-js/walkthrough/\nimport BpmnJS from 'bpmn-js/dist/bpmn-viewer.development.js';\n\nimport { elementExtractInfo, options } from './OMGShared'\n\nimport {\n  OMGBase,\n  events as baseEvents,\n  triggers as baseTriggers,\n  StateOMG\n} from './OMGBase';\n\nexport const events = baseEvents;\nexport const triggers = baseTriggers;\nexport const config = {\n  name: 'BPMN Viewer',\n  type: 'bpmn-viewer',\n  author: 'Kjartan Jonsson',\n  version: 0.1,\n  description: 'View Buisness Process Model Notation (BPMN) Diagrams as specified by the OMG group.',\n  relation: {\n    contains: [],\n    within: \"component\" // parent\n  },\n  options: { ...options, id: 'bpmn-viewer' },\n  state: StateOMG\n};\n\n\nexport class BPMNViewerComponent extends OMGBase {\n\n  constructor(props) {\n    super(props);\n    this.containerRef = React.createRef();\n  }\n\n  getInstance = (container) => {\n    if (!this.omgInstance) {\n      this.omgInstance = new BpmnJS({ container });\n    }\n    return this.omgInstance;\n  }\n\n  getActionState(action, callback) {\n    const self = this;\n    if (this.omgInstance) {\n      if (action === 'submit') {\n        this.omgInstance.saveXML({ format: true }).then((result) => {\n          /* TODO: see if this is really used, if so restore it by adding missing properties to initial state\n          const event_data = {\n            definition: self.omgInstance.getDefinitions(),\n            xml: xml,\n            id: self.state.data.id,\n            warnings: \"warnings\",\n            error: \"error\"\n          };\n          */\n          callback({ data: { xml: result.xml } })\n        }).catch(error => {\n          callback(); // do nothing regarding update\n          self.handleError(error); // handle error\n        });\n      } else { callback(); }\n    } else { callback(); }\n  }\n\n  updateView = function (action, arr, updated, data) {\n    // extend by parent\n    if (this.omgInstance) {\n      if (action === 'populate') {\n        this.renderDiagram(updated)\n      }\n      if (action === 'select') {\n        if (updated.selected) {\n          let selectionInst = this.omgInstance.get(\"selection\");\n          try {\n            selectionInst.select(updated.selected);\n          } catch (e) {\n            // TODO: throw common error notifying that the selection could not be done (missing content)\n          }\n        }\n      }\n      if (action === 'enable') { }\n      if (action === 'disable') { }\n      if (action === 'clear') {\n        this.omgInstance.clear();\n      }\n    }\n    return true;\n  };\n\n  renderDiagram(_data_diagrams) {\n    const data_diagrams = _data_diagrams || this.state;\n    const container = this.containerRef.current;\n\n    if (data_diagrams && data_diagrams.data && data_diagrams.data.length) {\n\n      const diagram = data_diagrams.data[0]; // always show the top most in array of diagrams (for each view)\n\n      if (container && diagram) {\n        // const commonTriggersOMG = getCommonTriggers(this, this.omgInstance);\n        this.registerCommonEvenHandlers(this.getInstance(container));\n        if (diagram.xml) { return this.loadDiagram(diagram.xml); }\n        else { \n          // TOOD: handle error missing xml\n        }\n      }\n    }\n    // TODO: share event - imported\n  }\n\n  componentDidMount = () => {\n\n    if (this.stateManager) { this.stateManager.doMount(this); }\n    this.renderDiagram();\n  }\n\n  elementSelect(dd_event, self, event, detailed, inst, config, include_selected) {\n    // TODO: share event - select\n\n    const omgInst = inst;\n    const elementIncoming = [];\n    const elementOutgoing = [];\n    const buisinessEvent = event.element.businessObject;\n\n    if (!buisinessEvent) {\n      // TODO: react to error\n      return;\n    }\n\n    let event_info = elementExtractInfo(self.state, buisinessEvent);\n\n    if (include_selected && (!!omgInst)) { // get selection\n      let selectionInstance = omgInst.get(\"selection\");\n      let selected = selectionInstance.get(\"selection\");\n      selected.forEach((itm, idx) => {\n        event_info.selected.push({\n          bpmnId: itm.id,\n          bpmnType: itm.type\n        });\n      })\n    }\n    if (detailed) {\n      if (buisinessEvent.incoming) {\n        buisinessEvent.incoming.forEach((item, idx) => {\n          elementIncoming.push({\n            bpmnId: item.id,\n            bpmnType: item['$type']\n          });\n        });\n      }\n\n      if (buisinessEvent.outgoing) {\n        buisinessEvent.outgoing.forEach((item, idx) => {\n          elementOutgoing.push({\n            bpmnId: item.id,\n            bpmnType: item['$type']\n          });\n        });\n      }\n\n      event_info.incoming = elementIncoming;\n      event_info.outgoing = elementOutgoing;\n      // event_info.definition = omgInst.getDefinitions();\n      event_info.parent = null;\n      if (event.element.parent) {\n        event_info.parent = {\n          bpmnId: event.element.parent.id,\n          bpmnType: event.element.parent['type'] || event.element.parent['$type']\n        }\n      }\n    }\n\n    this.triggerEvent(dd_event, event_info, self);\n  }\n\n  registerCommonEvenHandlers(bpmnInstance) {\n\n    bpmnInstance.on('element.changed', (event) => {\n      // Share event - diagram changed\n      // TODO: save this change to internal state\n      const event_element = event.element;\n      let event_data = {};\n      if (event_element.buisinessEvent) { event_data = elementExtractInfo(event_element.buisinessEvent); }\n      this.triggerEvent('changed', event_data, {});\n    });\n\n    // bpmnInstance.on('element.hover', (event, detailEvent) => { this.elementSelect('hover-over', this, event, false, bpmnInstance, this.props); });\n    // bpmnInstance.on('element.out', (event, detailEvent) => { this.elementSelect('hover-exit', this, event, false, bpmnInstance, this.props); });\n    bpmnInstance.on('element.click', (event, detailEvent) => { this.elementSelect('selected', this, event, true, bpmnInstance, this.props, true); });\n    bpmnInstance.on('element.dblclick', (event, detailEvent) => { this.elementSelect('tap', this, event, true, bpmnInstance, this.props, true); });\n    bpmnInstance.on('element.mousedown', (event, detailEvent) => { this.elementSelect('press', this, event, false, bpmnInstance, this.props); });\n    bpmnInstance.on('element.mouseup', (event, detailEvent) => { this.elementSelect('release', this, event, false, bpmnInstance, this.props); });\n\n    bpmnInstance.on('import.done', (event, detailEvent) => {\n      const {\n        error,\n        warnings\n      } = event;\n\n      if (error) {\n        // TODO: share event - import-error\n        return this.handleError(error);\n      }\n\n      bpmnInstance.get('canvas').zoom('fit-viewport');\n\n      return this.handleShown(warnings);\n    });\n  }\n\n  loadDiagram(xml) {\n    const self = this;\n    // Share event - loading\n\n    this.triggerEvent('loading', {\n      xml: xml,\n      id: self.state.data.id\n    }, {});\n\n    // Do the import\n    this.omgInstance.importXML(xml);\n    /* TODO: use promisess\n      function (err) {\n      if (err) {\n        self.handleError(err);\n        return;\n      } else {\n        // TODO: notify loaded\n      }\n    });\n    */\n  }\n\n  handleLoading() {\n    const { onLoading } = this.props;\n\n    if (onLoading) {\n      onLoading();\n    }\n  }\n\n  handleError(err) {\n    // TODO: refactor following to this -> this.eventDD('failure', err);\n    this.triggerEvent('failure', {\n      code: 12012,\n      detail: 'asdf'\n    }, err);\n  }\n\n  handleShown(warnings) {\n    const { onShown } = this.props;\n\n    if (onShown) {\n      onShown(warnings);\n    }\n  }\n\n  render() {\n    // this.renderDiagram();\n    return (<div className=\"react-bpmn-diagram-container\" ref={this.containerRef} style={{ flex: 1, height: '100vh' }} > </div >)\n  }\n}\n","// import BpmnJS from 'bpmn-js/dist/bpmn-modeler.development.js'; // https://bpmn.io/toolkit/bpmn-js/walkthrough/\nimport BpmnJS from 'bpmn-js/dist/bpmn-modeler.production.min.js';\n\nimport { BPMNViewerComponent } from './BPMNViewer'\n// editor requires CSS\nimport 'bpmn-js/dist/assets/diagram-js.css';\nimport 'bpmn-js/dist/assets/bpmn-font/css/bpmn.css';\n// common code between omgInstance and BPMNViewer\nimport { options, } from './OMGShared'\n\nimport {\n  events as baseEvents,\n  triggers as baseTriggers,\n  StateOMG\n} from './OMGBase';\n\nexport const events = baseEvents;\nexport const triggers = baseTriggers;\nexport const config = {\n  name: 'BPMN Editor',\n  type: 'bpmn-editor',\n  author: 'Kjartan Jonsson',\n  version: 0.1,\n  description: 'View Buisness Process Model Notation (CMMN) Diagrams as specified by the OMG group.',\n  relation: {\n    contains: [],\n    within: \"component\" // parent\n  },\n  options: { ...options, id: 'bpmn-editor' },\n  state: StateOMG\n};\nexport class BPMNEditorComponent extends BPMNViewerComponent {\n\n  getInstance = (container) => {\n    if (!this.omgInstance) {\n      // create the BPMN Editor\n      this.omgInstance = new BpmnJS({ container });\n    }\n    return this.omgInstance;\n  }\n\n}\n","import React from 'react';\n\nimport { BPMNViewerComponent, events as eventsViewer, triggers as triggersViewer, config as configViewer } from './BPMNViewer'\nimport { BPMNEditorComponent, events as eventsEditor, triggers as triggersEditor, config as configEditor } from './BPMNEditor'\n\nexport function BPMNViewer(props) {\n  // lets enumerate schema to extract uiSchema and validation\n  return (<BPMNViewerComponent {...props} />);\n}\n\nexport function BPMNEditor(props) {\n  // lets enumerate schema to extract uiSchema and validation\n  return (<BPMNEditorComponent {...props} />);\n}\n\nexport function registerViewer(component_manager) {\n  // self register component to layout manager\n  component_manager.registerComponent({\n    component: BPMNViewer,\n    type: 'bpmn-viewer',\n    events: eventsViewer,\n    triggers: triggersViewer,\n    config: configViewer\n  });\n}\n\nexport function registerEditor(component_manager) {\n  // self register component to layout manager\n  component_manager.registerComponent({\n    component: BPMNEditor,\n    type: 'bpmn-editor',\n    events: eventsEditor,\n    triggers: triggersEditor,\n    config: configEditor\n  });\n}","import CmmnJS from 'cmmn-js/dist/cmmn-navigated-viewer.production.min.js'; // https://bpmn.io/toolkit/cmmn-js/walkthrough/\nimport { BPMNViewerComponent } from './BPMNViewer';\nimport { options, elementExtractInfo } from './OMGShared'\nimport {\n  events as baseEvents,\n  triggers as baseTriggers,\n  StateOMG\n} from './OMGBase';\n\nexport const events = baseEvents;\nexport const triggers = baseTriggers;\nexport const config = {\n  name: 'CMMN Viewer',\n  type: 'cmmn-viewer',\n  author: 'Kjartan Jonsson',\n  version: 0.1,\n  description: 'View Buisness Process Model Notation (CMMN) Diagrams as specified by the OMG group.',\n  relation: {\n    contains: [],\n    within: \"component\" // parent\n  },\n  options: { ...options, id: 'cmmn-viewer' },\n  state: StateOMG\n};\n\nexport class CMMNViewerComponent extends BPMNViewerComponent {\n\n  getInstance = (container) => {\n    if (!this.omgInstance) {\n      // create the CMMN Viewer\n      this.omgInstance = new CmmnJS({ container });\n    }\n    return this.omgInstance;\n  }\n\n  getActionState(action, callback) {\n    // the CMMN library is different than BPMN\n    const self = this;\n    if (this.omgInstance) {\n      if (action === 'submit') {\n        this.omgInstance.saveXML({ format: true }, function (error, xml) {\n          if (error) {\n            callback(); // do nothing regarding update\n            self.handleError(error); // handle error         \n          } else {\n            /* TODO: see if this is really used, if so restore it by adding missing properties to initial state\n          const event_data = {\n            id: self.state.id,\n            definition: omgInst.getDefinitions(),\n            xml: xml,\n            error: err\n          };\n\n            */\n\n            callback({ data: { xml: xml } })\n          }\n        });\n      } else { callback(); }\n    } else { callback(); }\n  }\n\n\n  criterionChildren(criterion) {\n    const children = []\n    if (criterion.sentryRef) {\n      criterion.sentryRef.onParts.forEach(function (part) {\n        children.push({ type: part[\"$type\"], id: part[\"id\"] })\n      });\n    }\n    return children;\n  }\n\n  elementEdgeConnections(edge, elementIncoming, elementOutgoing) {\n    if (edge.cmmnElementRef) {\n      elementOutgoing[\"type\"] = edge.cmmnElementRef[\"$type\"];\n      elementOutgoing[\"id\"] = edge.cmmnElementRef[\"id\"];\n      elementIncoming[\"parts\"] = this.criterionChildren(edge.cmmnElementRef);\n      // incomming into criterion\n      elementIncoming[\"type\"] = edge.targetCMMNElementRef[\"$type\"];\n      elementIncoming[\"id\"] = edge.targetCMMNElementRef[\"id\"];\n      elementIncoming[\"parts\"] = this.criterionChildren(edge.targetCMMNElementRef);\n    }\n  }\n\n  elementSelect(dd_event, self, event, detailed, inst, config, include_selected) {\n    const omgInst = inst;\n    const elementIncoming = [];\n    const elementOutgoing = [];\n    const eventElement = event.element;\n    const buisinessEvent = event.element.businessObject;\n\n    if (!buisinessEvent) {\n      // TODO: react to error\n      return;\n    }\n\n    let event_info = elementExtractInfo(self.state.data, buisinessEvent);\n\n    if (include_selected && (!!omgInst)) { // get selection\n      let selectionInstance = omgInst.get(\"selection\");\n      let selected = selectionInstance.get(\"selection\");\n      selected.forEach((itm, idx) => {\n        event_info.selected.push({\n          bpmnId: itm.id,\n          bpmnType: itm.type\n        });\n      })\n    }\n\n    if (detailed) {\n      if (buisinessEvent[\"$type\"] === \"cmmndi:CMMNEdge\") {\n        this.elementEdgeConnections(buisinessEvent, elementIncoming, elementOutgoing);\n      } else {\n\n        if (buisinessEvent.entryCriteria) {\n          buisinessEvent.entryCriteria.forEach((item, idx) => {\n            const criterion = {\n              id: item.id,\n              type: item['$type'],\n              parts: this.criterionChildren(item)\n            }\n            elementIncoming.push(criterion);\n          });\n        }\n\n        if (eventElement.outgoing) {\n          eventElement.outgoing.forEach((item, idx) => {\n            const criterion = {\n              id: item.id,\n              type: item['type'],\n              parts: this.criterionChildren(item)\n            }\n            elementOutgoing.push(criterion);\n          });\n        }\n      }\n\n      event_info.incoming = elementIncoming;\n      event_info.outgoing = elementOutgoing;\n      event_info.definition = omgInst.getDefinitions();\n      event_info.parent = null;\n      // event_info.definition = omgInst.getDefinitions();\n      event_info.parent = null;\n      if (event.element.parent) {\n        event_info.parent = {\n          bpmnId: event.element.parent.id,\n          bpmnType: event.element.parent['type'] || event.element.parent['$type']\n        }\n      }\n    }\n\n    this.triggerEvent(dd_event, event_info, self);\n  }\n\n}\n","import CmmnJS from 'cmmn-js/dist/cmmn-modeler.production.min.js'; // https://bpmn.io/toolkit/bpmn-js/walkthrough/\nimport { CMMNViewerComponent } from './CMMNViewer'\n// editor requires CSS\nimport 'cmmn-js/dist/assets/diagram-js.css';\nimport 'cmmn-js/dist/assets/cmmn-font/css/cmmn.css';\n// common code between omgInstance and BPMNViewer\nimport { options, } from './OMGShared'\n\nimport {\n  events as baseEvents,\n  triggers as baseTriggers,\n  StateOMG\n} from './OMGBase';\n\nexport const events = baseEvents;\nexport const triggers = baseTriggers;\nexport const config = {\n  name: 'CMMN Editor',\n  type: 'cmmn-editor',\n  author: 'Kjartan Jonsson',\n  version: 0.1,\n  description: 'View Buisness Process Model Notation (CMMN) Diagrams as specified by the OMG group.',\n  relation: {\n    contains: [],\n    within: \"component\" // parent\n  },\n  options: { ...options, id: 'cmmn-editor' },\n  state: StateOMG\n};\nexport class CMMNEditorComponent extends CMMNViewerComponent {\n\n  getInstance = (container) => {\n    if (!this.omgInstance) {\n      // create the CMMN Editor\n      this.omgInstance = new CmmnJS({ container });\n    }\n    return this.omgInstance;\n  }\n\n}\n","import React from 'react';\n\nimport { CMMNViewerComponent, events as eventsViewer, triggers as triggersViewer, config as configViewer } from './CMMNViewer'\nimport { CMMNEditorComponent, events as eventsEditor, triggers as triggersEditor, config as configEditor } from './CMMNEditor'\n\nexport function CMMNViewer(props) {\n  // lets enumerate schema to extract uiSchema and validation\n  return (<CMMNViewerComponent {...props} />);\n}\n\nexport function CMMNEditor(props) {\n  // lets enumerate schema to extract uiSchema and validation\n  return (<CMMNEditorComponent {...props} />);\n}\n\nexport function registerViewer(component_manager) {\n  // self register component to layout manager\n  component_manager.registerComponent({\n    component: CMMNViewer,\n    type: 'cmmn-viewer',\n    events: eventsViewer,\n    triggers: triggersViewer,\n    config: configViewer\n  });\n}\n\nexport function registerEditor(component_manager) {\n  // self register component to layout manager\n  component_manager.registerComponent({\n    component: CMMNEditor,\n    type: 'cmmn-editor',\n    events: eventsEditor,\n    triggers: triggersEditor,\n    config: configEditor\n  });\n}\n","\n// Managers and factories\nimport { layout } from 'modelui-core-runtime';\n\n// Components\nimport { registerViewer as registerBPMNViewer, registerEditor as registerBPMNEditor } from './BPMN';\nimport { registerViewer as registerCMMNiewer, registerEditor as registerCMMNEditor } from './CMMN';\n\nexport default function registerComponents(component_manager) {\n\n    if (!component_manager) {\n        component_manager = layout.Manager.ComponentManager.getInstance();\n    }\n    /*\n    if (component_manager.constructor.name !== 'ComponentManager') {\n        throw `Constructor must be component manager. Got type ${component_manager.constructor.name}`;\n    }\n    */\n    registerBPMNViewer(component_manager);\n    registerBPMNEditor(component_manager);\n    registerCMMNiewer(component_manager);\n    registerCMMNEditor(component_manager);\n\n}"],"names":["options","elementExtractInfo","self_state","buisinessEvent","definitionRef","name","event_info","id","selection","bpmnId","bpmnType","label","define","type","autoComplete","isBlocking","selected","events","enabled","alias","info","description","schema","disabled","populating","populated","invalidated","validated","changed","tap","press","release","cleared","submitted","failure","triggers","submit","enable","disable","select","clear","populate","StateOMG","props","triggerEvent","action","obj","evt","eventManager","addEvent","registerComponent","actionHandlers","eventHandlers","component_info","self","dataActionHandlers","handler","getActionState","change","update","alterState","data","updateView","state","ids","xml","ddEvent","register","_objectSpread","_data","Array","isArray","length","selectedIndex","selectedId","manager","Error","getEventManager","structs","StateBase","StateInstance","OMGBase","config","arr","updated","exceptionCatched","action_name","event_object","console","StateBaseComponent","baseEvents","baseTriggers","author","version","relation","contains","within","BPMNViewerComponent","getInstance","container","omgInstance","BpmnJS","renderDiagram","selectionInst","get","e","componentDidMount","stateManager","doMount","containerRef","React","createRef","callback","saveXML","format","then","result","catch","error","handleError","_data_diagrams","data_diagrams","current","diagram","registerCommonEvenHandlers","loadDiagram","dd_event","event","detailed","inst","include_selected","omgInst","elementIncoming","elementOutgoing","element","businessObject","selectionInstance","forEach","itm","idx","push","incoming","item","outgoing","parent","bpmnInstance","on","event_element","event_data","detailEvent","elementSelect","warnings","zoom","handleShown","importXML","onLoading","err","code","detail","onShown","flex","height","BPMNEditorComponent","BPMNViewer","BPMNEditor","registerViewer","component_manager","component","eventsViewer","triggersViewer","configViewer","registerEditor","eventsEditor","triggersEditor","configEditor","CMMNViewerComponent","CmmnJS","criterion","children","sentryRef","onParts","part","edge","cmmnElementRef","criterionChildren","targetCMMNElementRef","eventElement","elementEdgeConnections","entryCriteria","parts","definition","getDefinitions","CMMNEditorComponent","CMMNViewer","CMMNEditor","registerComponents","layout","Manager","ComponentManager","registerBPMNViewer","registerBPMNEditor","registerCMMNiewer","registerCMMNEditor"],"mappings":"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"}